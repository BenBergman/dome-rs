#![no_std]
#![no_main]
#![feature(extern_crate_item_prelude)]

extern crate itsybitsy_m0 as hal;
extern crate panic_abort;

use hal::clock::GenericClockController;
use hal::delay::Delay;
use hal::prelude::*;
use hal::time::MegaHertz;
use hal::{entry, CorePeripherals, Peripherals};

#[entry]
fn main() -> ! {
    let mut peripherals = Peripherals::take().unwrap();
    let core = CorePeripherals::take().unwrap();
    let mut clocks = GenericClockController::with_internal_32kosc(
        peripherals.GCLK,
        &mut peripherals.PM,
        &mut peripherals.SYSCTRL,
        &mut peripherals.NVMCTRL,
    );
    let mut pins = hal::Pins::new(peripherals.PORT);
    let mut _red_led = pins.d13.into_open_drain_output(&mut pins.port);
    let mut delay = Delay::new(core.SYST, &mut clocks);

    let mut latch = pins.d2.into_open_drain_output(&mut pins.port);

    let mut spi = hal::spi_master(
        &mut clocks,
        MegaHertz(10),
        peripherals.SERCOM4,
        &mut peripherals.PM,
        pins.sck,
        pins.mosi,
        pins.miso,
        &mut pins.port,
    );

    loop {
        for &frame in DATA.iter() {
            for &val in frame.iter() {
                let _ = spi.send(val);
                latch.set_low();
                latch.set_high();
            }
            delay.delay_ms(200u8);
        }
    }
}

const DATA: [[u8; 7]; 41] = [
    // Cycle through banks
    //   6     5     4     3     2     1     0
    /*
     */
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // Cycle down rings
    [0x08, 0x08, 0x00, 0x08, 0x08, 0x00, 0x08],
    [0x10, 0x10, 0x11, 0x10, 0x10, 0x11, 0x10],
    [0x20, 0x21, 0x22, 0x01, 0x21, 0x22, 0x21],
    [0x42, 0x00, 0x44, 0x42, 0x42, 0x44, 0x42],
    [0x84, 0x84, 0x88, 0x84, 0x84, 0x88, 0x84],
    [0x08, 0x08, 0x00, 0x08, 0x08, 0x00, 0x08],
    [0x10, 0x10, 0x11, 0x10, 0x10, 0x11, 0x10],
    [0x20, 0x21, 0x22, 0x01, 0x21, 0x22, 0x21],
    [0x42, 0x00, 0x44, 0x42, 0x42, 0x44, 0x42],
    [0x84, 0x84, 0x88, 0x84, 0x84, 0x88, 0x84],
    [0x08, 0x08, 0x00, 0x08, 0x08, 0x00, 0x08],
    [0x10, 0x10, 0x11, 0x10, 0x10, 0x11, 0x10],
    [0x20, 0x21, 0x22, 0x01, 0x21, 0x22, 0x21],
    [0x42, 0x00, 0x44, 0x42, 0x42, 0x44, 0x42],
    [0x84, 0x84, 0x88, 0x84, 0x84, 0x88, 0x84],
    [0x08, 0x08, 0x00, 0x08, 0x08, 0x00, 0x08],
    [0x10, 0x10, 0x11, 0x10, 0x10, 0x11, 0x10],
    [0x20, 0x21, 0x22, 0x01, 0x21, 0x22, 0x21],
    [0x42, 0x00, 0x44, 0x42, 0x42, 0x44, 0x42],
    [0x84, 0x84, 0x88, 0x84, 0x84, 0x88, 0x84],
    /*
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, },
    */
];
